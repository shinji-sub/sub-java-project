package sub;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import sub.domain.Board;
import sub.domain.Carinfor;
import sub.domain.Customer;
import sub.handler.BoardAddCommand;
import sub.handler.BoardDeleteCommand;
import sub.handler.BoardDetailCommand;
import sub.handler.BoardListCommand;
import sub.handler.BoardUpdateCommand;
import sub.handler.CarinforAddCommand;
import sub.handler.CarinforDeleteCommand;
import sub.handler.CarinforDetailCommand;
import sub.handler.CarinforListCommand;
import sub.handler.CarinforUpdateCommand;
import sub.handler.Command;
import sub.handler.CustomerAddCommand;
import sub.handler.CustomerDeleteCommand;
import sub.handler.CustomerDetailCommand;
import sub.handler.CustomerListCommand;
import sub.handler.CustomerUpdateCommand;
import sub.util.Prompt;

public class Ex1 {


  static Scanner keyboard = new Scanner(System.in);

  static Deque<String> commandStack = new ArrayDeque<>();
  static Queue<String> commandQueue = new LinkedList<>();

  public static void main(String[] args) {

    Prompt prompt = new Prompt(keyboard);

    LinkedList<Board> boardList = new LinkedList<>();
    Command boardAddCommand = new BoardAddCommand(prompt, boardList);
    Command boardListCommand = new BoardListCommand(boardList);
    Command boardDetailCommand = new BoardDetailCommand(prompt, boardList);
    Command boardUpdateCommand = new BoardUpdateCommand(prompt, boardList);
    Command boardDeleteCommand = new BoardDeleteCommand(prompt, boardList);

    ArrayList<Carinfor> carinforList = new ArrayList<>();
    Command carinforAddCommand = new CarinforAddCommand(prompt, carinforList);
    Command carinforListCommand = new CarinforListCommand(carinforList);
    Command carinforDetailCommand = new CarinforDetailCommand(prompt, carinforList);
    Command carinforUpdateCommand = new CarinforUpdateCommand(prompt, carinforList);
    Command carinforDeleteCommand = new CarinforDeleteCommand(prompt, carinforList);

    LinkedList<Customer> customerList = new LinkedList<>();
    Command customerAddCommand = new CustomerAddCommand(prompt, customerList);
    Command customerListCommand = new CustomerListCommand(customerList);
    Command customerDetailCommand = new CustomerDetailCommand(prompt, customerList);
    Command customerUpdateCommand = new CustomerUpdateCommand(prompt, customerList);
    Command customerDeleteCommand = new CustomerDeleteCommand(prompt, customerList);
    String command;

    do {
      System.out.print("\n명령 >");
      command = keyboard.nextLine();

      if (command.length() == 0)
        continue;

      commandStack.push(command);

      commandQueue.offer(command);

      switch (command) {
        case "/carinfor/add":
          carinforAddCommand.execute();
          break;

        case "/carinfor/list":
          carinforListCommand.execute();
          break;

        case "/carinfor/detail":
          carinforDetailCommand.execute();
          break;

        case "/carinfor/update":
          carinforUpdateCommand.execute();
          break;

        case "/carinfor/delete":
          carinforDeleteCommand.execute();
          break;

        case "/customer/add":
          customerAddCommand.execute();
          break;


        case "/customer/list":
          customerListCommand.execute();
          break;

        case "/customer/detail":
          customerDetailCommand.execute();
          break;

        case "/customer/update":
          customerUpdateCommand.execute();
          break;

        case "/customer/delete":
          customerDeleteCommand.execute();
          break;

        case "/board/add":
          boardAddCommand.execute();
          break;

        case "/board/list":
          boardListCommand.execute();
          break;

        case "/board/detail":
          boardDetailCommand.execute();
          break;

        case "/board/update":
          boardUpdateCommand.execute();
          break;

        case "/board/delete":
          boardDeleteCommand.execute();
          break;

        case "history":
          printCommandHistory(commandStack.iterator());
          break;

        case "history2":
          printCommandHistory(commandQueue.iterator());
          break;

        default:
          if (!command.equalsIgnoreCase("quit")) {
            System.out.println("실행할 수 없는 명령어입니다.");
          }
      }

    } while (!command.equalsIgnoreCase("quit"));

    System.out.println("안녕!");

    keyboard.close();
  }

  private static void printCommandHistory(Iterator<String> iterator) {
    int count = 0;
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
      count++;

      if ((count % 5) == 0) {
        System.out.print(":");
        String str = keyboard.nextLine();
        if (str.equalsIgnoreCase("q"))
          break;
      }
    }
  }


}


